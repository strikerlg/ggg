${ pojo.documentation }\
<% pojo.annotations.each { a -> %>
${a}\
<% } %>
public ${pojo.abstractStmt}class ${pojo.name}${pojo.extendsImplementStmt} {
<% pojo.fields.each { p -> %>\
<% p.annotations.each { a -> %>
	${a}\
<% } %>
	private $p.type ${p.name}${p.defaultExpression};
<% } %>\
<% if (!pojo.modelClass) { %>
${pojo.ctorCode}\
<% } %>\

<% pojo.fields.each { p -> %>\
${p.documentation}
<% if (p.isVirtual() && !p.isFormula()) { %>\
	public $p.type ${p.getter}() {
		try {
			$p.name = compute${p.firstUpper(p.name)}();
		} catch (NullPointerException e) {
			${p.importName('org.slf4j.Logger')} logger = ${p.importName('org.slf4j.LoggerFactory')}.getLogger(getClass());
			logger.error("NPE in function field: ${p.getter}()", e);
		}
		return $p.name;
	}

	protected $p.type compute${p.firstUpper(p.name)}() {
		$p.code
	}
<% } else { %>\
<% if (p.name == "id") { %>\
	@Override
<% } %>\
	public $p.type ${p.getter}() {
		$p.getterBody
	}
<% } %>\

<% if (p.name == "id") { %>\
	@Override
<% } %>\
	public void ${p.setter}($p.type $p.name) {
		$p.setterBody
	}
<% if (p.isCollection()) { %>\

	/**
	 * Add the given {@link ${p.target}} item to the {@code ${p.name}}.
<% if (p.serverType == "one-to-many" && p.mappedBy) {%>\
	 *
	 * <p>
	 * It sets {@code item.${p.mappedBy} = this} to ensure the proper relationship.
	 * </p>
<% } %>\
	 *
	 * @param item
	 *            the item to add
	 */
	public void add${p.firstUpper(p.singularName)}($p.target item) {
		if (${p.getter}() == null) {
			${p.setter}(${p.newCollection()});
		}
		${p.getter}().add(item);
<% if (p.linkCode) { %>\
		${p.linkCode}
<% } %>\
	}

	/**
	 * Remove the given {@link ${p.target}} item from the {@code ${p.name}}.
<% if (p.serverType == "one-to-many" && !p.orphanRemoval) {%>\
	 *
	 * <p>
	 * It sets {@code item.${p.mappedBy} = null} to break the relationship.
	 * </p>
<% } %>\
	 *
 	 * @param item
	 *            the item to remove
	 */
	public void remove${p.firstUpper(p.singularName)}($p.target item) {
		if (${p.getter}() == null) {
			return;
		}
		${p.getter}().remove(item);
<% if (p.delinkCode) { %>\
		${p.delinkCode}
<% } %>\
	}

	/**
	 * Clear the {@code ${p.name}} collection.
	 *
<% if (p.serverType == "one-to-many") {%>\
	 * <p>
<% if (!p.orphanRemoval) {%>\
	 * It sets {@code item.${p.mappedBy} = null} to break the relationship.
<% } else { %>\
	 * If you have to query {@link ${p.target}} records in same transaction, make
	 * sure to call {@link javax.persistence.EntityManager#flush() } to avoid
	 * unexpected errors.
<% } %>\
	 * </p>
<% } %>\
	 */
	public void clear${p.firstUpper(p.name)}() {
		if (${p.getter}() != null) {
<% if (p.delinkAllCode) { %>\
			${p.delinkAllCode}
<% } %>\
			${p.getter}().clear();
		}
	}
<% } %>\
<% } %>\
<% if (pojo.modelClass) { %>
	@Version
	private Integer version;
	
	@Transient
	private transient boolean selected;

	@Widget(massUpdate = true)
	private Boolean archived;

	public abstract Long getId();

	public abstract void setId(Long id);
	
	public Boolean getArchived() {
		return archived;
	}
	
	public void setArchived(Boolean archived) {
		this.archived = archived;
	}

	public Integer getVersion() {
		return version;
	}

	public void setVersion(Integer version) {
		this.version = version;
	}
	
	public void setSelected(boolean selected) {
		this.selected = selected;
	}

	public boolean isSelected() {
		return selected;
	}
<% } else { %>
	@Override
	public boolean equals(Object obj) {
		${pojo.equalsCode}
	}

	@Override
	public int hashCode() {
		${pojo.hashCodeCode}
	}

	@Override
	public String toString() {
		${pojo.toStringCode}
	}
<% } %>\
}
